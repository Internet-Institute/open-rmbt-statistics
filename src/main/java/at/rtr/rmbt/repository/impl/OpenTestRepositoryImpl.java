package at.rtr.rmbt.repository.impl;

import at.rtr.rmbt.constant.Constants;
import at.rtr.rmbt.dto.Classification;
import at.rtr.rmbt.dto.ImageGenerateDto;
import at.rtr.rmbt.repository.OpenTestRepository;
import at.rtr.rmbt.response.opentest.OpenTestDTO;
import at.rtr.rmbt.response.opentest.OpenTestSearchResponse;
import at.rtr.rmbt.utils.QueryParser;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.stereotype.Service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@Service
@Slf4j
@RequiredArgsConstructor
public class OpenTestRepositoryImpl implements OpenTestRepository {

    private final JdbcTemplate jdbcTemplate;

    //maximum of rows sent in one single request
    public final int MAX_SEARCH_ROWS = 10000;  //maximum number of rows allowed, currently approx 1.5s response time at maximum

    public final int DEFAULT_SEARCH_ROWS = 100; //default number of rows (when max_results is not specified)


    @Override
    public OpenTestSearchResponse getOpenTestSearchResults(QueryParser qp, long offset, long maxrows, Set<String> additionalFields) {
        long startTime = System.currentTimeMillis();
        OpenTestSearchResponse.OpenTestSearchResponseBuilder dto = OpenTestSearchResponse.builder();

        String offsetString = (offset > 0) ? " AND t.uid<" + offset : ""; //if no sorting is used
        String offsetString2 = (offset > 0) ? " OFFSET " + offset : ""; //if sorting is used => may have concurrency issues in the results

        String orderClause = qp.getOrderClause();
        boolean defaultOrder = true;
        if (orderClause == null || orderClause.isEmpty()) {
            orderClause = " ORDER BY t.uid DESC ";
            offsetString2 = "";
        } else {
            defaultOrder = false;
            offsetString = "";
        }

        if (maxrows > MAX_SEARCH_ROWS)
            maxrows = MAX_SEARCH_ROWS;
        if (maxrows <= 0)
            maxrows = DEFAULT_SEARCH_ROWS;


        //There are many LEFT JOINs in the sql statement that are usual not needed.
        //This has no significant impact on the performance since our DBMS (postgres)
        //is intelligent enough to ignore these during query optimization if they are
        //not needed
        final String sql = "SELECT" +
                " t.uid as cursor, " + //only for pagination
                " ('P' || t.open_uuid) open_uuid," +
                " ('O' || t.open_test_uuid) open_test_uuid," +
                " to_char(t.time AT TIME ZONE 'UTC', 'YYYY-MM-DD HH24:MI:SS') \"time\"," +
                //" nt.group_name cat_technology," +
                //" nt.name network_type," +

                //csv 6:lat
                " (CASE WHEN (t.geo_accuracy < ?) AND (t.geo_provider IS DISTINCT FROM 'manual') AND (t.geo_provider IS DISTINCT FROM 'geocoder') THEN" +
                " t.geo_lat" +
                " WHEN (t.geo_accuracy < ?) THEN" +
                " ROUND(t.geo_lat*1111)/1111" + // approx 100m
                " ELSE null" +
                " END) latitude," +
                // csv 7:long
                " (CASE WHEN (t.geo_accuracy < ?) AND (t.geo_provider IS DISTINCT FROM 'manual') AND (t.geo_provider IS DISTINCT FROM 'geocoder') THEN" +
                " t.geo_long" +
                " WHEN (t.geo_accuracy < ?) THEN" +
                " ROUND(t.geo_long*741)/741 " + //approx 100m
                " ELSE null" +
                " END) longitude," +
                // accuracy of geo location in m
                " (CASE WHEN (t.geo_accuracy < ?) AND (t.geo_provider IS DISTINCT FROM 'manual') AND (t.geo_provider IS DISTINCT FROM 'geocoder') " +
                " THEN t.geo_accuracy " +
                " WHEN (t.geo_accuracy < 100) AND ((t.geo_provider = 'manual') OR (t.geo_provider = 'geocoder')) THEN 100" + // limit accuracy to 100m
                " WHEN (t.geo_accuracy < ?) THEN t.geo_accuracy" +
                " ELSE null END) loc_accuracy, " +
                //" t.geo_provider loc_src," +
                " t.speed_download download_kbit," +
                " t.speed_upload upload_kbit," +
                " (t.ping_median::float / 1000000) ping_ms," +
                " t.signal_strength," +
                " t.lte_rsrp," +
                //" ts.name server_name," +
                //" duration test_duration," +
                //" num_threads," +
                " CONCAT(plattform,' ',network_group_name) as platform, " +
                " network_group_name cat_technology," +
                " COALESCE(adm.fullname, t.model) model," +
                " COALESCE(mprov.shortname, t.network_operator_name, prov.shortname, msim.shortname,msim.name,"
                + "    prov.name, mprov.name, t.public_ip_as_name, network_sim_operator) provider_name " +
                //" client_software_version client_version," +
                //" network_operator network_mcc_mnc," +
                //" network_operator_name network_name," +
                //" network_sim_operator sim_mcc_mnc," +
                //" nat_type \"connection\"," +
                //" public_ip_asn asn," +
                //" client_public_ip_anonymized ip_anonym," +
                //" (ndt.s2cspd*1000)::int ndt_download_kbit," +
                //" (ndt.c2sspd*1000)::int ndt_upload_kbit" +
                " FROM test t" +
                qp.getJoins() +
                " WHERE " +
                " (t.deleted = false)" +
                " AND status = 'FINISHED' " + qp.getWhereClause("AND") + offsetString +
                orderClause + " LIMIT " + maxrows + offsetString2;
        try {
            List<OpenTestDTO> results = jdbcTemplate.query(new PreparedStatementCreator() {
                @Override
                public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                    return con.prepareStatement(sql);
                }
            }, new PreparedStatementSetter() {
                @Override
                public void setValues(PreparedStatement ps) throws SQLException {
                    double accuracy = Constants.RMBT_GEO_ACCURACY_DETAIL_LIMIT;
                    ps.setDouble(1, accuracy);
                    ps.setDouble(2, accuracy);
                    ps.setDouble(3, accuracy);
                    ps.setDouble(4, accuracy);
                    ps.setDouble(5, accuracy);
                    ps.setDouble(6, accuracy);
                    qp.fillInWhereClause(ps, 7);
                }
            }, new ResultSetExtractor<List<OpenTestDTO>>() {
                @Override
                public List<OpenTestDTO> extractData(ResultSet rs) throws SQLException, DataAccessException {
                    List<OpenTestDTO> list = new ArrayList<OpenTestDTO>();
                    while (rs.next()) {
                        OpenTestDTO openTestDTO = OpenTestDTO.builder()
                                .cursor(rs.getLong("cursor"))
                                .openUuid(rs.getString("open_uuid"))
                                .openTestUuid(rs.getString("open_test_uuid"))
                                .latitude(getDoubleOrNull(rs, "latitude"))
                                .longitude(getDoubleOrNull(rs, "longitude"))
                                .locAccuracy(getDoubleOrNull(rs, "loc_accuracy"))
                                .lteRsrp(getIntegerOrNull(rs, "lte_rsrp"))
                                .model(rs.getString("model"))
                                .platform(rs.getString("platform"))
                                .providerName(rs.getString("provider_name"))
                                .signalStrength(getIntegerOrNull(rs, "signal_strength"))
                                .time(rs.getString("time"))
                                .downloadKbit(getIntegerOrNull(rs, "download_kbit"))
                                .uploadKbit(getIntegerOrNull(rs, "upload_kbit"))
                                .pingMs(getDoubleOrNull(rs, "ping_ms"))
                                .build();
                        list.add(openTestDTO);
                    }
                    return list;
                }
            });

            dto.results(results);

            //remember last uid for pagination since rs can only be traversed in one direction
            //if there are more results than we send, use pagination
            if (results.size() == maxrows) {
                //if it is the standard sort order
                if (defaultOrder) {
                    dto.nextCursor(results.get(results.size() - 1).getCursor());
                } else {
                    offset = (offset < 0) ? 0 : offset;
                    dto.nextCursor(offset + maxrows);
                }
            } else {
                dto.nextCursor(null);
            }

            //also put in the result, how long the query took to execute
            long elapsedTime = System.currentTimeMillis() - startTime;
            //jsonResponse.put("duration_ms",elapsedTime);
            dto.durationMs(elapsedTime);

            if (additionalFields != null) {
                for (OpenTestDTO result : results) {
                    if (additionalFields.contains("download_classification")) {
                        result.setDownloadClassification(Classification.classify(Classification.THRESHOLD_DOWNLOAD, result.getDownloadKbit(), 4));
                    }
                    if (additionalFields.contains("upload_classification")) {
                        result.setUploadClassification(Classification.classify(Classification.THRESHOLD_UPLOAD, result.getUploadKbit(), 4));
                    }
                    if (additionalFields.contains("ping_classification")) {
                        result.setPingClassification(Classification.classify(Classification.THRESHOLD_PING, Math.round(result.getPingMs() * 1000000), 4));
                    }
                    if (additionalFields.contains("signal_classification") && (result.getSignalStrength() != null || result.getLteRsrp() != null)) {
                        if (result.getPlatform().contains("WLAN")) { // RSSI for Wifi
                            result.setSignalClassification(Classification.classify(Classification.THRESHOLD_SIGNAL_WIFI, result.getSignalStrength(), 4));
                        } else if (result.getLteRsrp() != null) {
                            result.setSignalClassification(Classification.classify(Classification.THRESHOLD_SIGNAL_RSRP, result.getLteRsrp(), 4));
                        } else { // RSSI for Mobile
                            result.setSignalClassification(Classification.classify(Classification.THRESHOLD_SIGNAL_MOBILE, result.getSignalStrength(), 4));
                        }
                    }
                }
            }

        } catch (Exception ex) {
            log.error("Error: ", ex);
        }
        return dto.build();
    }

    @Override
    public ImageGenerateDto getImageGenerateDto(String lang, String uuid, String size) {
        final String sql = "    SELECT"
                //+ " ('P' || t.open_uuid) open_uuid,"
                //+ " to_char(t.time AT TIME ZONE 'UTC', 'YYYY-MM-DD HH24:MI') \"time\","
                + " nt.name network_type,"
                //+ " t.geo_provider loc_src,"
                + " t.speed_download download_kbit,"
                + " t.speed_upload upload_kbit,"
                + " (t.ping_median::float / 1000000) ping_ms,"
                + " t.signal_strength,"
                + " COALESCE(prov.shortname, mprov.shortname, prov.name, mprov.name, network_operator_name, network_sim_operator) provider_name,"
                + " COALESCE(t.plattform, t.client_name) as platform "
                //+ " network_operator network_mcc_mnc,"
                //+ " network_operator_name network_name,"
                //+ " network_sim_operator sim_mcc_mnc,"
                //+ " nat_type \"connection\","
                //+ " public_ip_asn asn,"
                //+ " client_public_ip_anonymized ip_anonym,"
                //+ " (ndt.s2cspd*1000)::int ndt_download_kbit,"
                //+ " (ndt.c2sspd*1000)::int ndt_upload_kbit"
                + " FROM test t"
                + " LEFT JOIN network_type nt ON nt.uid=t.network_type"
                + " LEFT JOIN device_map adm ON adm.codename=t.model"
                + " LEFT JOIN test_server ts ON ts.uid=t.server_id"
                + " LEFT JOIN test_ndt ndt ON t.uid=ndt.test_id"
                + " LEFT JOIN provider prov ON mobile_provider_id = prov.uid "
                + " LEFT JOIN provider mprov ON provider_id = mprov.uid"
                + " WHERE "
                + " t.deleted = false AND t.implausible = false"
                + " AND status = 'FINISHED'"
                + " AND t.open_test_uuid = ?";

        return jdbcTemplate.query(
                new PreparedStatementCreator() {
                    @Override
                    public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                        return con.prepareStatement(sql);
                    }
                },
                new PreparedStatementSetter() {
                    @Override
                    public void setValues(PreparedStatement ps) throws SQLException {
                        ps.setObject(1, uuid, Types.OTHER);
                    }
                },
                new ResultSetExtractor<ImageGenerateDto>() {
                    @Override
                    public ImageGenerateDto extractData(ResultSet rs) throws SQLException, DataAccessException {
                        if (!rs.next()) {
                            throw new RuntimeException("invalid uuid");
                        }
                        return ImageGenerateDto.builder()
                                .size(size)
                                .lang(lang)
                                .download(((double) rs.getInt("download_kbit")) / 1000)
                                .upload(((double) rs.getInt("upload_kbit")) / 1000)
                                .ping(rs.getFloat("ping_ms"))
                                .isp(rs.getString("provider_name"))
                                .typ(rs.getString("network_type"))
                                .signal(rs.getString("signal_strength"))
                                .os(rs.getString("platform"))
                                .build();
                    }
                });
    }


    public Double getDoubleOrNull(ResultSet resultSet, String columnName) throws SQLException {
        return resultSet.getObject(columnName) != null ? resultSet.getDouble(columnName) : null;
    }

    public Integer getIntegerOrNull(ResultSet resultSet, String columnName) throws SQLException {
        return resultSet.getObject(columnName) != null ? resultSet.getInt(columnName) : null;
    }
}