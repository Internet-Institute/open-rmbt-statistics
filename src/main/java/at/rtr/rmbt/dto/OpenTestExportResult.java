package at.rtr.rmbt.dto;

import at.rtr.rmbt.response.opentest.OpenTestDTO;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

//JSON property order for CSV output
@JsonPropertyOrder({
        "open_uuid", "open_test_uuid", "time_utc", "cat_technology", "network_type", "lat", "long",
        "loc_src", "loc_accuracy", "gkz", "zip_code", "country_location", "download_kbit", "upload_kbit", "ping_ms",
        "lte_rsrp", "lte_rsrq", "server_name", "test_duration", "num_threads", "platform", "model", "client_version",
        "network_mcc_mnc", "network_name", "sim_mcc_mnc", "nat_type", "asn", "ip_anonym", "ndt_download_kbit",
        "ndt_upload_kbit", "implausible", "signal_strength", "pinned", "kg_nr", "gkz_sa", "land_cover", "cell_area_code",
        "cell_location_id", "channel_number", "radio_band",
        "settlement_type", "link_id", "link_name", "link_name1", "link_name2", "link_distance", "edge_id", "link_frc", "dtm_level"
})
@Getter
@Setter
@SuperBuilder
public class OpenTestExportResult extends OpenTestDTO {


    @JsonProperty("loc_src")
    private String locSrc;

    @JsonProperty(value = "gkz")
    private Integer gkz;

    @JsonProperty("zip_code")
    private String zipCode;

    @JsonProperty("country_location")
    private String countryLocation;

    @JsonProperty("server_name")
    private String serverName;

    @JsonProperty("test_duration")
    private Integer testDuration;

    @JsonProperty("num_threads")
    private Integer numThreads;

    @JsonProperty("client_version")
    private String clientVersion;

    @JsonProperty("network_mcc_mnc")
    private String networkMccMnc;

    @JsonProperty("network_name")
    private String networkName;

    @JsonProperty("sim_mcc_mnc")
    private String simMccMnc;

    @JsonProperty("nat_type")
    private String natType;

    @JsonProperty(value = "asn")
    private Long asn;

    @JsonProperty("ip_anonym")
    private String ipAnonym;

    @JsonProperty("ndt_download_kbit")
    private Integer ndtDownloadKbit;

    @JsonProperty("ndt_upload_kbit")
    private Integer ndtUploadKbit;

    @JsonProperty(value = "implausible")
    private Boolean implausible;

    @JsonProperty("pinned")
    private Boolean pinned;

    @JsonProperty("kg_nr")
    private Integer kgNr;

    @JsonProperty("gkz_sa")
    private Integer gkzSa;

    @JsonProperty("land_cover")
    private Integer landCover;

    @JsonProperty("cell_area_code")
    private Integer cellAreaCode;

    @JsonProperty("cell_location_id")
    private Integer cellLocationId;

    @JsonProperty("channel_number")
    private Integer channelNumber;

    @JsonProperty("radio_band")
    private Integer radioBand;

    @JsonProperty("lte_rsrq")
    private Integer lteRsrq;

    @JsonProperty("cat_technology")
    private String catTechnology;

    @JsonProperty("network_type")
    private String networkType;

    @JsonProperty("settlement_type")
    private Integer settlementType;

    @JsonProperty("link_id")
    private Integer linkId;

    @JsonProperty("link_name")
    private String linkName;

    @JsonProperty("link_distance")
    private Integer linkDistance;

    @JsonProperty("edge_id")
    private String edgeId;

    @JsonProperty("link_frc")
    private Integer linkFrc;

    @JsonProperty("dtm_level")
    private Integer dtmLevel;

    @Override
    @JsonProperty("time_utc")
    public String getTime() {
        return super.getTime();
    }

    @Override
    @JsonIgnore
    public Integer getDownloadClassification() {
        return super.getDownloadClassification();
    }

    @Override
    @JsonIgnore
    public Integer getUploadClassification() {
        return super.getUploadClassification();
    }

    @Override
    @JsonIgnore
    public Integer getPingClassification() {
        return super.getPingClassification();
    }

    @Override
    @JsonIgnore
    public String getProviderName() {
        return super.getProviderName();
    }
}
