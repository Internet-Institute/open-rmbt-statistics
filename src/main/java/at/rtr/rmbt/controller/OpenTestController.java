package at.rtr.rmbt.controller;

import at.rtr.rmbt.constant.URIConstants;
import at.rtr.rmbt.response.OpenTestDetailsDtoResponse;
import at.rtr.rmbt.service.OpenTestService;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@Slf4j
@RequiredArgsConstructor
public class OpenTestController {

    private final OpenTestService openTestService;

    @ApiOperation(value = "Search for open data tests",
            nickname = "search",
            notes = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "download_kbit", value = "Download speed in kilobit per second", dataType = "string", example = ">6903", paramType = "query"),
            @ApiImplicitParam(name = "upload_kbit", value = "Upload speed in kilobit per second.", dataType = "string", example = "<4670", paramType = "query"),
            @ApiImplicitParam(name = "ping_ms", value = "Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions " +
                    "(before June 3rd 2015) this was the minimum ping measured on the client side.", dataType = "string", example = "<16", paramType = "query"),
            @ApiImplicitParam(name = "gkz", value = "Community ID (Gemeindekennzahl, see <http://www.bev.gv.at/portal/page?_pageid=713,2601287&_dad=portal&_schema=PORTAL>).", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "gkz_sa", value = "Community ID (Gemeindekennzahl, see <http://www.statistik.at/web_de/klassifikationen/regionale_gliederungen/gemeinden/index.html>)", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "cat_technology", value = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "client_version", value = "Software version number of the client.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "model", value = "Name of the device used.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "network_name", value = "Display name of the mobile network.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "network_type", value = "Type of the network, e.g. MOBILE, LAN, WLAN.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "platform", value = "Platform on which the test has been conducted", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "signal_strength", value = "Signal strength (RSSI) in dBm.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "lte_rsrp", value = "LTE signal strength in dBm.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "open_uuid", value = "Open-UUID: Identifies the client that conducted the test. The a new Open-UUID is assigned to the client on a regular basis.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "open_test_uuid", value = "The UUID of the test.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "client_uuid", value = "The private UUID of a client", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "loop_uuid", value = "The loop UUID of a single loop test", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "test_uuid", value = "The private UUID of a test", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "long", value = "Longitude of the client position.", dataType = "number", paramType = "query"),
            @ApiImplicitParam(name = "lat", value = "Latitude of the client position.", dataType = "number", paramType = "query"),
            @ApiImplicitParam(name = "radius", value = "Radius in meters defining based on lat/long parameters", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "mobile_provider_name", value = "mobile operator name", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "provider_name", value = "Name of the internet service provider.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sim_mcc_mnc", value = "Network identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sim_country", value = "Home country of the SIM card in ISO 3166.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "network_country", value = "Country of the network in ISO 3166.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "country_geoip", value = "Country according client IP address.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "country_location", value = "Country of geo-location.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "user_server_selection", value = "Legacy", dataType = "boolean", paramType = "query"),
            @ApiImplicitParam(name = "loc_accuracy", value = "Estimation of accuracy of client location in meters", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "link_name", value = "Austrian road/raiway line identifier, e.g. 'A2'", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "public_ip_as_name", value = "Name of the AS of the clients public IP.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "time", value = "UTC date and time when test was started.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "radio_band", value = "Radio band used when conducting the test.", dataType = "long", paramType = "query"),
            @ApiImplicitParam(name = "cell_area_code", value = "Number describing the coarse location of a cell. E.g. the Tracking Area Code (TAC) in case of 4G " +
                    "or the Location Area Code (LAC) in case of 2G or 3G", dataType = "long", paramType = "query"),
            @ApiImplicitParam(name = "cell_location_id", value = "Number identifying the location of a cell. E.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.", dataType = "long", paramType = "query"),
            @ApiImplicitParam(name = "additional_info", value = "additional properties to return", example = "download_classification", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "format", value = "Desired output format, either 'csv' or 'json', default: json", example = "json", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sort_by", value = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                    example = "download_kbit", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sort_order", value = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.", example = "asc", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "max_results", value = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.", example = "10", dataType = "integer", paramType = "query"),
            @ApiImplicitParam(name = "cursor", value = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sender", value = "Sender ID", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "timestamp", value = "Alias '_'. Will be ignored and can be used to prevent caching of the response.", dataType = "string", paramType = "query")
    })
    @GetMapping(value = {URIConstants.OPEN_TEST_SEARCH, URIConstants.OPEN_TEST})
    public ResponseEntity<Object> searchForOpenDataTests(
            @RequestParam MultiValueMap<String, String> parameters

    ) {
        return openTestService.searchOpenDataTests(parameters);
    }

    @ApiOperation(value = "Search for open data tests",
            nickname = "search",
            notes = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "download_kbit", value = "Download speed in kilobit per second", dataType = "string", example = ">6903", paramType = "query"),
            @ApiImplicitParam(name = "upload_kbit", value = "Upload speed in kilobit per second.", dataType = "string", example = "<4670", paramType = "query"),
            @ApiImplicitParam(name = "ping_ms", value = "Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions " +
                    "(before June 3rd 2015) this was the minimum ping measured on the client side.", dataType = "string", example = "<16", paramType = "query"),
            @ApiImplicitParam(name = "gkz", value = "Community ID (Gemeindekennzahl, see <http://www.bev.gv.at/portal/page?_pageid=713,2601287&_dad=portal&_schema=PORTAL>).", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "gkz_sa", value = "Community ID (Gemeindekennzahl, see <http://www.statistik.at/web_de/klassifikationen/regionale_gliederungen/gemeinden/index.html>)", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "cat_technology", value = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "client_version", value = "Software version number of the client.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "model", value = "Name of the device used.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "network_name", value = "Display name of the mobile network.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "network_type", value = "Type of the network, e.g. MOBILE, LAN, WLAN.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "platform", value = "Platform on which the test has been conducted", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "signal_strength", value = "Signal strength (RSSI) in dBm.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "lte_rsrp", value = "LTE signal strength in dBm.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "open_uuid", value = "Open-UUID: Identifies the client that conducted the test. The a new Open-UUID is assigned to the client on a regular basis.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "open_test_uuid", value = "The UUID of the test.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "client_uuid", value = "The private UUID of a client", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "loop_uuid", value = "The loop UUID of a single loop test", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "test_uuid", value = "The private UUID of a test", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "long", value = "Longitude of the client position.", dataType = "number", paramType = "query"),
            @ApiImplicitParam(name = "lat", value = "Latitude of the client position.", dataType = "number", paramType = "query"),
            @ApiImplicitParam(name = "radius", value = "Radius in meters defining based on lat/long parameters", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "mobile_provider_name", value = "mobile operator name", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "provider_name", value = "Name of the internet service provider.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sim_mcc_mnc", value = "Network identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sim_country", value = "Home country of the SIM card in ISO 3166.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "network_country", value = "Country of the network in ISO 3166.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "country_geoip", value = "Country according client IP address.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "country_location", value = "Country of geo-location.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "user_server_selection", value = "Legacy", dataType = "boolean", paramType = "query"),
            @ApiImplicitParam(name = "loc_accuracy", value = "Estimation of accuracy of client location in meters", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "link_name", value = "Austrian road/raiway line identifier, e.g. 'A2'", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "public_ip_as_name", value = "Name of the AS of the clients public IP.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "time", value = "UTC date and time when test was started.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "radio_band", value = "Radio band used when conducting the test.", dataType = "long", paramType = "query"),
            @ApiImplicitParam(name = "cell_area_code", value = "Number describing the coarse location of a cell. E.g. the Tracking Area Code (TAC) in case of 4G " +
                    "or the Location Area Code (LAC) in case of 2G or 3G", dataType = "long", paramType = "query"),
            @ApiImplicitParam(name = "cell_location_id", value = "Number identifying the location of a cell. E.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.", dataType = "long", paramType = "query"),
            @ApiImplicitParam(name = "additional_info", value = "additional properties to return", example = "download_classification", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "format", value = "Desired output format, either 'csv' or 'json', default: json", example = "json", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sort_by", value = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                    example = "download_kbit", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sort_order", value = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.", example = "asc", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "max_results", value = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.", example = "10", dataType = "integer", paramType = "query"),
            @ApiImplicitParam(name = "cursor", value = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "sender", value = "Sender ID", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "timestamp", value = "Alias '_'. Will be ignored and can be used to prevent caching of the response.", dataType = "string", paramType = "query")
    })
    @PostMapping(path = {URIConstants.OPEN_TEST_SEARCH, URIConstants.OPEN_TEST}, consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})
    public ResponseEntity<Object> searchForOpenDataTestsPost(@RequestParam MultiValueMap parameters) {
        return openTestService.searchOpenDataTests(parameters);
    }

    @ApiOperation(value = "Export png",
            notes = "Export test result as png banner",
            nickname = "export-png")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "lang", value = "Mandatory. The language that should be exported.", dataType = "string", example = "en", paramType = "path", required = true),
            @ApiImplicitParam(name = "open_test_uuid", value = "Mandatory. The open-test-uuid of the test.", dataType = "string", example = "Oc1326b7c-4141-42cb-b8c5-922c356a6cee", paramType = "path", required = true),
            @ApiImplicitParam(name = "size", value = "Mandatory. Either 'forumlarge' or 'forumsmall' or 'thumbnail ", dataType = "string", example = "thumbnail", paramType = "path", required = true)
    })
    @GetMapping(URIConstants.EXPORT_PNG)
    public ResponseEntity<Object> getPng(@PathVariable String lang, @PathVariable(name = "open_test_uuid") String openTestUuid, @PathVariable String size) {
        return openTestService.retrievePng(lang, openTestUuid, size);
    }

    @ApiOperation(value = "query for OpenTests",
            notes = "Query for a specific measurement result",
            nickname = "opentest-query")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "open-test-uuid", value = "Mandatory. The open-test-uuid of the test.", dataType = "string", example = "Oc1326b7c-4141-42cb-b8c5-922c356a6cee", paramType = "path", required = true),
            @ApiImplicitParam(name = "verbose", value = "Optional. If >0 the threadwise speed curve is additionally returned.", dataType = "integer", example = "0", paramType = "query"),
            @ApiImplicitParam(name = "sender", value = "Optional. ID of the sender, for authentification.", dataType = "string", paramType = "query")
    })
    @GetMapping(value = URIConstants.OPEN_TEST_BY_UUID)
    public OpenTestDetailsDtoResponse getOpenTestByUuid(
            @PathVariable(value = "open_test_uuid") String openTestUuid,
            @RequestParam(value = "verbose", required = false) String verbose
    ) {
        return openTestService.getOpenTestByUuid(openTestUuid, verbose);
    }
}
