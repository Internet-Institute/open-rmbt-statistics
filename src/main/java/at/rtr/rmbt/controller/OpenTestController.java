package at.rtr.rmbt.controller;

import at.rtr.rmbt.constant.URIConstants;
import at.rtr.rmbt.request.opentest.OpenTestSearchRequest;
import at.rtr.rmbt.response.OpenTestDetailsDtoResponse;
import at.rtr.rmbt.service.OpenTestService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@Slf4j
@RequiredArgsConstructor
public class OpenTestController {

    private final OpenTestService openTestService;

    @GetMapping(URIConstants.OPEN_TEST_SEARCH)
    public ResponseEntity<Object> searchForOpenDataTests(
            @RequestParam(required = false, name = "download_kbit") String downloadKbit,
            @RequestParam(required = false, name = "upload_kbit") String uploadKbit,
            @RequestParam(required = false, name = "ping_ms") String pingMs,
            @RequestParam(required = false, name = "gkz") String gkz,
            @RequestParam(required = false, name = "gkz_sa") String gkzSa,
            @RequestParam(required = false, name = "cat_technology") String catTechnology,
            @RequestParam(required = false, name = "client_version") String clientVersion,
            @RequestParam(required = false, name = "model") String model,
            @RequestParam(required = false, name = "network_name") String networkName,
            @RequestParam(required = false, name = "network_type") String networkType,
            @RequestParam(required = false, name = "platform") String platform,
            @RequestParam(required = false, name = "signal_strength") String signalStrength,
            @RequestParam(required = false, name = "lte_rsrp") String lteRsrp,
            @RequestParam(required = false, name = "open_uuid") String openUuid,
            @RequestParam(required = false, name = "open_test_uuid") String openTestUuid,
            @RequestParam(required = false, name = "client_uuid") String clientUuid,
            @RequestParam(required = false, name = "loop_uuid") String loopUuid,
            @RequestParam(required = false, name = "test_uuid") String testUuid,
            @RequestParam(required = false, name = "long") String longitude,
            @RequestParam(required = false, name = "lat") String latitude,
            @RequestParam(required = false, name = "radius") String radius,
            @RequestParam(required = false, name = "mobile_provider_name") String mobileProviderName,
            @RequestParam(required = false, name = "provider_name") String providerName,
            @RequestParam(required = false, name = "sim_mcc_mnc") String simMccMnc,
            @RequestParam(required = false, name = "sim_country") String simCountry,
            @RequestParam(required = false, name = "network_country") String networkCountry,
            @RequestParam(required = false, name = "country_geoip") String countryGeoip,
            @RequestParam(required = false, name = "country_location") String countryLocation,
            @RequestParam(required = false, name = "user_server_selection") String userServerSelection,
            @RequestParam(required = false, name = "loc_accuracy") String locationAccuracy,
            @RequestParam(required = false, name = "link_name") String linkName,
            @RequestParam(required = false, name = "public_ip_as_name") String publicIpAsName,
            @RequestParam(required = false, name = "time") String time,
            @RequestParam(required = false, name = "radio_band") String radioBand,
            @RequestParam(required = false, name = "cell_area_code") String cellAreaCode,
            @RequestParam(required = false, name = "additional_info") List<String> additionalInfo,
            @RequestParam(required = false, name = "format") String format,
            @RequestParam(required = false, name = "sort_by") String sortBy,
            @RequestParam(required = false, name = "sort_order") String sortOrder,
            @RequestParam(required = false, name = "max_results") String maxResults,
            @RequestParam(required = false, name = "cursor") String cursor,
            @RequestParam(required = false, name = "sender") String sender,
            @RequestParam(required = false, name = "timestamp") String timestamp

    ) {
        OpenTestSearchRequest openTestSearchRequest = OpenTestSearchRequest.builder()
                .downloadKbit(downloadKbit)
                .uploadKbit(uploadKbit)
                .pingMs(pingMs)
                .gkz(gkz)
                .gkzSa(gkzSa)
                .catTechnology(catTechnology)
                .clientVersion(clientVersion)
                .model(model)
                .networkName(networkName)
                .networkType(networkType)
                .platform(platform)
                .signalStrength(signalStrength)
                .lteRsrp(lteRsrp)
                .openUuid(openUuid)
                .openTestUuid(openTestUuid)
                .clientUuid(clientUuid)
                .loopUuid(loopUuid)
                .testUuid(testUuid)
                .longitude(longitude)
                .latitude(latitude)
                .radius(radius)
                .mobileProviderName(mobileProviderName)
                .providerName(providerName)
                .simMccMnc(simMccMnc)
                .simCountry(simCountry)
                .networkCountry(networkCountry)
                .countryGeoip(countryGeoip)
                .countryLocation(countryLocation)
                .userServerSelection(userServerSelection)
                .locationAccuracy(locationAccuracy)
                .linkName(linkName)
                .publicIpAsName(publicIpAsName)
                .time(time)
                .radioBand(radioBand)
                .cellAreaCode(cellAreaCode)
                .additionalInfo(additionalInfo)
                .format(format)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .maxResults(maxResults)
                .cursor(cursor)
                .sender(sender)
                .timestamp(timestamp)
                .build();
        return openTestService.searchOpenDataTests(openTestSearchRequest);
    }

    @PostMapping(URIConstants.OPEN_TEST_SEARCH)
    public ResponseEntity<Object> searchForOpenDataTests(@RequestBody OpenTestSearchRequest openTestSearchRequest) {
        return openTestService.searchOpenDataTests(openTestSearchRequest);
    }

    @GetMapping(URIConstants.EXPORT_PNG)
    public ResponseEntity<Object> getPng(@PathVariable String lang, @PathVariable(name = "open_test_uuid") String openTestUuid, @PathVariable String size) {
        return openTestService.retrievePng(lang, openTestUuid, size);
    }

    @GetMapping(value = URIConstants.OPEN_TEST_BY_UUID)
    public OpenTestDetailsDtoResponse getOpenTestByUuid(
            @PathVariable(value = "open_test_uuid") String openTestUuid,
            @RequestParam(value = "verbose", required = false) String verbose,
            @RequestParam(value = "sender", required = false) String sender,//TODO: investigate DEPRECATED?
            @RequestParam(value = "?sender", required = false) String deprecatedSender//TODO: investigate DEPRECATED?
    ) {
        return openTestService.getOpenTestByUuid(openTestUuid, verbose, sender, deprecatedSender);
    }
}
