package at.rtr.rmbt.controller;

import at.rtr.rmbt.constant.URIConstants;
import at.rtr.rmbt.request.opentest.OpenTestSearchRequest;
import at.rtr.rmbt.response.OpenTestDetailsDtoResponse;
import at.rtr.rmbt.service.OpenTestService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@Slf4j
@RequiredArgsConstructor
public class OpenTestController {

    private final OpenTestService openTestService;

    @GetMapping(URIConstants.OPEN_TEST_SEARCH)
    public ResponseEntity<Object> searchForOpenDataTests(
            @RequestParam(required = false, name = "additional_info") List<String> additionalInfo,
            @RequestParam(required = false, name = "max_results") String maxResults,
            @RequestParam(required = false, name = "cursor") String cursor,
            @RequestParam(required = false, name = "format") String format,
            @RequestParam MultiValueMap<String, String> parameters

    ) {
        OpenTestSearchRequest openTestSearchRequest = OpenTestSearchRequest.builder()
                .additionalInfo(additionalInfo)
                .format(format)
                .maxResults(maxResults)
                .cursor(cursor)
                .build();
        return openTestService.searchOpenDataTests(openTestSearchRequest, parameters);
    }

    @PostMapping(URIConstants.OPEN_TEST_SEARCH)
    public ResponseEntity<Object> searchForOpenDataTests(@RequestBody OpenTestSearchRequest openTestSearchRequest,
                                                         @RequestParam MultiValueMap<String, String> parameters) {
        return openTestService.searchOpenDataTests(openTestSearchRequest, parameters);
    }

    @GetMapping(URIConstants.EXPORT_PNG)
    public ResponseEntity<Object> getPng(@PathVariable String lang, @PathVariable(name = "open_test_uuid") String openTestUuid, @PathVariable String size) {
        return openTestService.retrievePng(lang, openTestUuid, size);
    }

    @GetMapping(value = URIConstants.OPEN_TEST_BY_UUID)
    public OpenTestDetailsDtoResponse getOpenTestByUuid(
            @PathVariable(value = "open_test_uuid") String openTestUuid,
            @RequestParam(value = "verbose", required = false) String verbose
    ) {
        return openTestService.getOpenTestByUuid(openTestUuid, verbose);
    }
}
