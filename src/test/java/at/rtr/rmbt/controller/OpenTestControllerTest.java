package at.rtr.rmbt.controller;

import at.rtr.rmbt.TestConstants;
import at.rtr.rmbt.constant.Constants;
import at.rtr.rmbt.constant.URIConstants;
import at.rtr.rmbt.response.LocationGraphDTO;
import at.rtr.rmbt.response.OpenTestDetailsDtoResponse;
import at.rtr.rmbt.response.OpenTestGraphDTO;
import at.rtr.rmbt.service.OpenTestService;
import org.hamcrest.core.IsNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.List;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;

@ExtendWith(SpringExtension.class)
class OpenTestControllerTest {

    private MockMvc mockMvc;

    @MockBean
    private OpenTestService openTestService;

    @BeforeEach
    void setUp() {
        OpenTestController openTestController = new OpenTestController(openTestService);
        mockMvc = MockMvcBuilders.standaloneSetup(openTestController)
                .build();
    }

    @Test
    void getOpenTestByUuid_providerNotNull_LocationGraphItem() throws Exception {
        LocationGraphDTO.LocationGraphItem locationGraphItem = new LocationGraphDTO.LocationGraphItem(TestConstants.DEFAULT_LONGITUDE,
                TestConstants.DEFAULT_LATITUDE,
                TestConstants.DEFAULT_LOC_ACCURACY,
                TestConstants.DEFAULT_TIMESTAMP,
                TestConstants.DEFAULT_BEARING,
                TestConstants.DEFAULT_SPEED,
                TestConstants.DEFAULT_ALTITUDE,
                null);
        locationGraphItem.setTimeElapsed(TestConstants.DEFAULT_TIME_ELAPSED);
        OpenTestGraphDTO openTestGraphDTO = new OpenTestGraphDTO();
        openTestGraphDTO.setLocation(List.of(locationGraphItem));

        OpenTestDetailsDtoResponse openTestDetailsDtoResponse = new OpenTestDetailsDtoResponse();
        openTestDetailsDtoResponse.setSpeedCurve(openTestGraphDTO);
        when(openTestService.getOpenTestByUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING, null))
                .thenReturn(openTestDetailsDtoResponse);
        mockMvc.perform(MockMvcRequestBuilders.get(URIConstants.OPEN_TEST_BY_UUID, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING))
                .andDo(print())
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].long").value(TestConstants.DEFAULT_LONGITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].lat").value(TestConstants.DEFAULT_LATITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].loc_accuracy").value(TestConstants.DEFAULT_LOC_ACCURACY))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].bearing").value(IsNull.nullValue()))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].speed").value(IsNull.nullValue()))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].altitude").value(TestConstants.DEFAULT_ALTITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].loc_src").value(IsNull.nullValue()))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].time_elapsed").value(TestConstants.DEFAULT_TIME_ELAPSED));
    }

    @Test
    void getOpenTestByUuid_providerNotGps_LocationGraphItem() throws Exception {
        LocationGraphDTO.LocationGraphItem locationGraphItem = new LocationGraphDTO.LocationGraphItem(TestConstants.DEFAULT_LONGITUDE,
                TestConstants.DEFAULT_LATITUDE,
                TestConstants.DEFAULT_LOC_ACCURACY,
                TestConstants.DEFAULT_TIMESTAMP,
                TestConstants.DEFAULT_BEARING,
                TestConstants.DEFAULT_SPEED,
                TestConstants.DEFAULT_ALTITUDE,
                TestConstants.DEFAULT_PROVIDER);
        locationGraphItem.setTimeElapsed(TestConstants.DEFAULT_TIME_ELAPSED);
        OpenTestGraphDTO openTestGraphDTO = new OpenTestGraphDTO();
        openTestGraphDTO.setLocation(List.of(locationGraphItem));

        OpenTestDetailsDtoResponse openTestDetailsDtoResponse = new OpenTestDetailsDtoResponse();
        openTestDetailsDtoResponse.setSpeedCurve(openTestGraphDTO);
        when(openTestService.getOpenTestByUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING, null))
                .thenReturn(openTestDetailsDtoResponse);
        mockMvc.perform(MockMvcRequestBuilders.get(URIConstants.OPEN_TEST_BY_UUID, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING))
                .andDo(print())
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].long").value(TestConstants.DEFAULT_LONGITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].lat").value(TestConstants.DEFAULT_LATITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].loc_accuracy").value(TestConstants.DEFAULT_LOC_ACCURACY))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].bearing").value(IsNull.nullValue()))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].speed").value(IsNull.nullValue()))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].altitude").value(TestConstants.DEFAULT_ALTITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].loc_src").value(TestConstants.DEFAULT_PROVIDER))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].time_elapsed").value(TestConstants.DEFAULT_TIME_ELAPSED));
    }

    @Test
    void getOpenTestByUuid_providerIsGps_LocationGraphItem() throws Exception {
        LocationGraphDTO.LocationGraphItem locationGraphItem = new LocationGraphDTO.LocationGraphItem(TestConstants.DEFAULT_LONGITUDE,
                TestConstants.DEFAULT_LATITUDE,
                TestConstants.DEFAULT_LOC_ACCURACY,
                TestConstants.DEFAULT_TIMESTAMP,
                TestConstants.DEFAULT_BEARING,
                TestConstants.DEFAULT_SPEED,
                TestConstants.DEFAULT_ALTITUDE,
                Constants.PROVIDER_GPS);
        locationGraphItem.setTimeElapsed(TestConstants.DEFAULT_TIME_ELAPSED);
        OpenTestGraphDTO openTestGraphDTO = new OpenTestGraphDTO();
        openTestGraphDTO.setLocation(List.of(locationGraphItem));

        OpenTestDetailsDtoResponse openTestDetailsDtoResponse = new OpenTestDetailsDtoResponse();
        openTestDetailsDtoResponse.setSpeedCurve(openTestGraphDTO);
        when(openTestService.getOpenTestByUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING, null))
                .thenReturn(openTestDetailsDtoResponse);
        mockMvc.perform(MockMvcRequestBuilders.get(URIConstants.OPEN_TEST_BY_UUID, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING))
                .andDo(print())
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].long").value(TestConstants.DEFAULT_LONGITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].lat").value(TestConstants.DEFAULT_LATITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].loc_accuracy").value(TestConstants.DEFAULT_LOC_ACCURACY))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].bearing").value(TestConstants.DEFAULT_BEARING))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].speed").value(TestConstants.DEFAULT_SPEED))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].altitude").value(TestConstants.DEFAULT_ALTITUDE))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].loc_src").value(Constants.PROVIDER_GPS))
                .andExpect(MockMvcResultMatchers.jsonPath("$.speed_curve.location[0].time_elapsed").value(TestConstants.DEFAULT_TIME_ELAPSED));
    }
}