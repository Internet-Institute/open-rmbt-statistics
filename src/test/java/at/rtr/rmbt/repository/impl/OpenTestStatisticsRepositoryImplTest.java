package at.rtr.rmbt.repository.impl;

import at.rtr.rmbt.TestObjects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


@ExtendWith(SpringExtension.class)
class OpenTestStatisticsRepositoryImplTest {

    private static final String SQL_QUERY = "SELECT ident, count(ident) as cnt " +
            "FROM (SELECT CASE WHEN (time > (current_timestamp - interval '5 minutes')) " +
            "THEN '0' WHEN (time > (current_timestamp - interval '30 minutes')) " +
            "THEN '1' WHEN (time > (current_timestamp - interval '60 minutes')) " +
            "THEN '2' WHEN (time > (current_timestamp - interval '720 minutes')) " +
            "THEN '3' WHEN (time > (current_timestamp - interval '1440 minutes')) " +
            "THEN '4' WHEN (time > (current_timestamp - interval '10080 minutes')) " +
            "THEN '5'  END as ident  " +
            "FROM test t " +
            "LEFT JOIN network_type nt ON nt.uid=t.network_type " +
            "LEFT JOIN device_map adm ON adm.codename=t.model " +
            "LEFT JOIN test_server ts ON ts.uid=t.server_id " +
            "LEFT JOIN provider prov ON provider_id = prov.uid  " +
            "LEFT JOIN provider mprov ON mobile_provider_id = mprov.uid " +
            "WHERE t.deleted = false " +
            "AND status = 'FINISHED'  " +
            "AND country_location ILIKE ? " +
            "AND t.speed_download = ? " +
            "AND t.implausible = ?  " +
            "AND time > (current_timestamp - interval '10080 minutes')) " +
            "a GROUP BY ident ORDER BY ident ASC;";

    @Mock
    private JdbcTemplate jdbcTemplate;
    @InjectMocks
    private OpenTestStatisticsRepositoryImpl openTestStatisticsRepository;


    @Captor
    private ArgumentCaptor<PreparedStatementCreator> preparedStatementCreator;
    @Captor
    private ArgumentCaptor<PreparedStatementSetter> preparedStatementSetter;
    @Captor
    private ArgumentCaptor<ResultSetExtractor<Map<String, Long>>> resultSetExtractor;


    @Mock
    private Connection connection;
    @Mock
    private ResultSet resultSet;

    @Test
    void calculateStatistics_correctInvocation_StatisticsResponseMap() throws SQLException {
        openTestStatisticsRepository.calculateStatistics(TestObjects.queryParser());
        verify(jdbcTemplate).query(preparedStatementCreator.capture(), preparedStatementSetter.capture(), resultSetExtractor.capture());

        preparedStatementCreator.getValue().createPreparedStatement(connection);
        verify(connection).prepareStatement(SQL_QUERY);
        when(resultSet.next()).thenReturn(true, true, true, true, true, true, false);
        when(resultSet.getLong("cnt")).thenReturn(22L, 11L, 22L, 11L, 11L, 11L);
        when(resultSet.getInt("ident")).thenReturn(0, 1, 2, 3, 4, 5);

        var extractedResult = resultSetExtractor.getValue().extractData(resultSet);
        assertEquals(TestObjects.statisticsResponse(), extractedResult);
    }
}