package at.rtr.rmbt.service.impl;

import at.rtr.rmbt.TestConstants;
import at.rtr.rmbt.mapper.OpenTestMapper;
import at.rtr.rmbt.repository.GeoAnalyticsRepository;
import at.rtr.rmbt.repository.OpenTestRepository;
import at.rtr.rmbt.request.opentest.OpenTestSearchRequest;
import at.rtr.rmbt.response.opentest.OpenTestDTO;
import at.rtr.rmbt.response.opentest.OpenTestSearchResponse;
import at.rtr.rmbt.service.ImageExportService;
import at.rtr.rmbt.service.LocationService;
import at.rtr.rmbt.service.PingService;
import at.rtr.rmbt.service.RadioSignalService;
import at.rtr.rmbt.utils.QueryParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.util.MultiValueMap;

import java.nio.charset.StandardCharsets;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
class OpenTestServiceImplTest {

    @Mock
    private OpenTestRepository openTestRepository;
    @Mock
    private ImageExportService imageExportService;
    @Mock
    private PingService pingService;
    @Mock
    private RadioSignalService radioSignalService;
    @Mock
    private LocationService locationService;
    @Mock
    private GeoAnalyticsRepository geoAnalyticsRepository;
    @Mock
    private OpenTestMapper openTestMapper;
    @InjectMocks
    private OpenTestServiceImpl openTestService;

    @Mock
    private OpenTestSearchRequest openTestSearchRequest;
    @Mock
    private MultiValueMap<String, String> parameters;

    @Test
    void searchOpenDataTests_correctInvocation_ResponseEntity() throws JsonProcessingException {
        when(openTestRepository.getOpenTestSearchResults(any(QueryParser.class), anyLong(), anyLong(), any()))
                .thenReturn(getOpenTestSearchResponse());
        var actualResult = openTestService.searchOpenDataTests(openTestSearchRequest, parameters);

        assertEquals(expectedJsonResponseEntity(), actualResult);
    }

    private ResponseEntity<Object> expectedJsonResponseEntity() throws JsonProcessingException {
        ObjectMapper om = new ObjectMapper();
        om.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);
        return ResponseEntity.ok()
                .contentType(new MediaType("application", "json", StandardCharsets.UTF_8))
                .body(om.writer().writeValueAsString(getOpenTestSearchResponse()));
    }

    private OpenTestSearchResponse getOpenTestSearchResponse() {
        return OpenTestSearchResponse.builder()
                .durationMs(TestConstants.DEFAULT_TEST_DURATION.longValue())
                .nextCursor(TestConstants.DEFAULT_NEXT_CURSOR)
                .results(Collections.emptyList())
                .build();
    }
}